"""Cung c·∫•p giao di·ªán ƒë·ªÉ t∆∞∆°ng t√°c v·ªõi camera."""
import cv2
import numpy as np
import time
from typing import Tuple, Union, Optional


class CameraInterface:
    """Giao di·ªán t∆∞∆°ng t√°c v·ªõi camera v·∫≠t l√Ω ho·∫∑c camera m·∫°ng."""

    def __init__(self, camera_index: Union[int, str] = 0, resolution: Tuple[int, int] = (1280, 1024), fps: int = 30, 
                 use_optimized_settings: bool = True):
        """
        Kh·ªüi t·∫°o giao di·ªán camera.

        Args:
            camera_index: Index c·ªßa camera ho·∫∑c ƒë·ªãa ch·ªâ URL cho camera m·∫°ng
            resolution: ƒê·ªô ph√¢n gi·∫£i (width, height) mong mu·ªën
            fps: S·ªë khung h√¨nh m·ªói gi√¢y mong mu·ªën
            use_optimized_settings: C√≥ s·ª≠ d·ª•ng optimized settings hay kh√¥ng
        """
        self.camera_index = camera_index
        self.resolution = resolution
        self.fps = fps
        self.use_optimized_settings = use_optimized_settings
        self.capture = None
        self.is_initialized = False
        
        # FPS tracking variables
        self.fps_counter = 0
        self.fps_start_time = time.time()
        self.current_fps = 0.0
        self.last_fps_update = time.time()
        self.fps_update_interval = 1.0  # C·∫≠p nh·∫≠t FPS m·ªói gi√¢y

    def initialize(self) -> None:
        """
        Kh·ªüi t·∫°o v√† m·ªü k·∫øt n·ªëi ƒë·∫øn camera v·ªõi optimized settings.
        
        Raises:
            RuntimeError: N·∫øu kh√¥ng th·ªÉ m·ªü camera
        """
        try:
            self.capture = cv2.VideoCapture(self.camera_index, cv2.CAP_DSHOW)
            if not self.capture.isOpened():
                # Th·ª≠ index camera kh√°c n·∫øu m·∫∑c ƒë·ªãnh kh√¥ng ho·∫°t ƒë·ªông
                self.capture = cv2.VideoCapture(1, cv2.CAP_DSHOW)  # Th·ª≠ index 1
                if not self.capture.isOpened():
                    raise RuntimeError(f"Kh√¥ng th·ªÉ m·ªü camera t·∫°i index {self.camera_index} ho·∫∑c 1")
            
            # Basic camera settings
            self.capture.set(cv2.CAP_PROP_FRAME_WIDTH, self.resolution[0])
            self.capture.set(cv2.CAP_PROP_FRAME_HEIGHT, self.resolution[1])
            self.capture.set(cv2.CAP_PROP_FPS, self.fps)
            
            # Apply optimized settings if enabled - matching optimized_realtime.py
            if self.use_optimized_settings:
                self.capture.set(cv2.CAP_PROP_BUFFERSIZE, 2)  # Gi·∫£m buffer ƒë·ªÉ gi·∫£m lag
                # Ch·ªâ d√πng MJPG nh∆∞ trong optimized_realtime.py
                self.capture.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc(*'MJPG'))  # MJPG for better quality
            
            # Ki·ªÉm tra th√¥ng s·ªë camera th·ª±c t·∫ø
            actual_width = int(self.capture.get(cv2.CAP_PROP_FRAME_WIDTH))
            actual_height = int(self.capture.get(cv2.CAP_PROP_FRAME_HEIGHT))
            actual_fps = self.capture.get(cv2.CAP_PROP_FPS)
            
            if self.use_optimized_settings:
                actual_buffer = int(self.capture.get(cv2.CAP_PROP_BUFFERSIZE))
                print(f"‚úÖ Camera setup: {actual_width}x{actual_height} @ {actual_fps:.1f}FPS (Buffer: {actual_buffer})")
                print("‚úÖ Optimized settings applied (MJPG only, no exposure/autofocus changes)")
            else:
                print(f"Camera initialized: {actual_width}x{actual_height} @ {actual_fps:.1f}FPS")
                print("üìπ Standard camera settings")
            
            self.is_initialized = True
        except Exception as e:
            self.is_initialized = False
            raise RuntimeError(f"L·ªói kh·ªüi t·∫°o camera: {str(e)}")

    def get_frame(self) -> np.ndarray:
        """
        L·∫•y khung h√¨nh t·ª´ camera.
        
        Returns:
            np.ndarray: Khung h√¨nh d·∫°ng numpy array v·ªõi ƒë·ªãnh d·∫°ng BGR
            
        Raises:
            RuntimeError: N·∫øu camera ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o ho·∫∑c kh√¥ng th·ªÉ l·∫•y khung h√¨nh
        """
        if not self.is_initialized or self.capture is None:
            raise RuntimeError("Camera ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
            
        ret, frame = self.capture.read()
        if not ret:
            raise RuntimeError("Kh√¥ng th·ªÉ ƒë·ªçc khung h√¨nh t·ª´ camera")
        
        # C·∫≠p nh·∫≠t FPS counter
        self._update_fps()
        
        return frame

    def _update_fps(self) -> None:
        """C·∫≠p nh·∫≠t th√¥ng tin FPS."""
        current_time = time.time()
        self.fps_counter += 1
        
        # C·∫≠p nh·∫≠t FPS m·ªói gi√¢y
        if current_time - self.last_fps_update >= self.fps_update_interval:
            time_elapsed = current_time - self.last_fps_update
            self.current_fps = self.fps_counter / time_elapsed
            self.fps_counter = 0
            self.last_fps_update = current_time

    def get_fps(self) -> float:
        """
        L·∫•y FPS hi·ªán t·∫°i.
        
        Returns:
            float: FPS hi·ªán t·∫°i
        """
        return self.current_fps

    def draw_fps(self, frame: np.ndarray, position: Tuple[int, int] = (10, 30), 
                 color: Tuple[int, int, int] = (0, 255, 0), font_scale: float = 1.0,
                 show_target_fps: bool = True) -> np.ndarray:
        """
        V·∫Ω th√¥ng tin FPS l√™n frame.
        
        Args:
            frame: Frame ƒë·ªÉ v·∫Ω FPS l√™n
            position: V·ªã tr√≠ v·∫Ω text (x, y)
            color: M√†u text (B, G, R)
            font_scale: K√≠ch th∆∞·ªõc font
            show_target_fps: C√≥ hi·ªÉn th·ªã target FPS kh√¥ng
            
        Returns:
            np.ndarray: Frame ƒë√£ ƒë∆∞·ª£c v·∫Ω FPS
        """
        result_frame = frame.copy()
        
        # Text hi·ªÉn th·ªã FPS hi·ªán t·∫°i
        fps_text = f"FPS: {self.current_fps:.1f}"
        
        # Th√™m target FPS n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        if show_target_fps:
            fps_text += f" (Target: {self.fps})"
        
        # V·∫Ω background ƒëen cho text ƒë·ªÉ d·ªÖ ƒë·ªçc
        text_size = cv2.getTextSize(fps_text, cv2.FONT_HERSHEY_SIMPLEX, font_scale, 2)[0]
        cv2.rectangle(result_frame, 
                     (position[0] - 5, position[1] - text_size[1] - 5),
                     (position[0] + text_size[0] + 5, position[1] + 5),
                     (0, 0, 0), -1)
        
        # V·∫Ω text FPS
        cv2.putText(result_frame, fps_text, position, 
                   cv2.FONT_HERSHEY_SIMPLEX, font_scale, color, 2)
        
        return result_frame

    def get_frame_with_fps(self, position: Tuple[int, int] = (10, 30), 
                          color: Tuple[int, int, int] = (0, 255, 0), 
                          font_scale: float = 1.0, show_target_fps: bool = True) -> np.ndarray:
        """
        L·∫•y frame ƒë√£ ƒë∆∞·ª£c v·∫Ω FPS.
        
        Args:
            position: V·ªã tr√≠ v·∫Ω text (x, y)
            color: M√†u text (B, G, R)
            font_scale: K√≠ch th∆∞·ªõc font
            show_target_fps: C√≥ hi·ªÉn th·ªã target FPS kh√¥ng
            
        Returns:
            np.ndarray: Frame ƒë√£ ƒë∆∞·ª£c v·∫Ω FPS
        """
        frame = self.get_frame()
        return self.draw_fps(frame, position, color, font_scale, show_target_fps)

    def get_resolution(self) -> Tuple[int, int]:
        """
        L·∫•y ƒë·ªô ph√¢n gi·∫£i th·ª±c t·∫ø c·ªßa camera.
        
        Returns:
            Tuple[int, int]: (width, height) th·ª±c t·∫ø c·ªßa camera
        """
        if not self.is_initialized or self.capture is None:
            return (0, 0)
            
        width = int(self.capture.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(self.capture.get(cv2.CAP_PROP_FRAME_HEIGHT))
        return (width, height)

    def set_optimized_settings(self, enabled: bool) -> None:
        """
        B·∫≠t/t·∫Øt optimized settings cho camera ƒë√£ kh·ªüi t·∫°o.
        
        Args:
            enabled: True ƒë·ªÉ b·∫≠t optimized settings, False ƒë·ªÉ t·∫Øt
        """
        if not self.is_initialized or self.capture is None:
            print("‚ö†Ô∏è Camera ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o")
            return
            
        self.use_optimized_settings = enabled
        
        if enabled:
            # Apply optimized settings - matching optimized_realtime.py
            self.capture.set(cv2.CAP_PROP_BUFFERSIZE, 2)
            # Ch·ªâ d√πng MJPG, kh√¥ng thay ƒë·ªïi exposure hay autofocus
            self.capture.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc(*'MJPG'))
            print("‚úÖ Optimized settings enabled (MJPG only)")
        else:
            # Restore default settings
            self.capture.set(cv2.CAP_PROP_BUFFERSIZE, 4)  # Default buffer
            # Reset v·ªÅ FOURCC m·∫∑c ƒë·ªãnh
            self.capture.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc(*'YUYV'))
            print("üìπ Standard settings restored")

    def release(self) -> None:
        """Gi·∫£i ph√≥ng t√†i nguy√™n camera."""
        if self.capture is not None:
            self.capture.release()
            cv2.destroyAllWindows()
            self.is_initialized = False


if __name__ == "__main__":
    camera = CameraInterface()
    camera.initialize()
    
    print("Camera ƒëang ch·∫°y v·ªõi FPS tracking!")
    print("C√°c ph√≠m t·∫Øt:")
    print("  'q': Tho√°t")
    print("  'f': B·∫≠t/t·∫Øt hi·ªÉn th·ªã FPS")
    print("  's': In th√¥ng tin FPS ra console")
    
    show_fps = True
    try:
        while True:
            if show_fps:
                # L·∫•y frame v·ªõi FPS ƒë∆∞·ª£c v·∫Ω l√™n
                frame = camera.get_frame_with_fps(
                    position=(10, 30),
                    color=(0, 255, 0),  # Xanh l√°
                    font_scale=0.8,
                    show_target_fps=True
                )
            else:
                # L·∫•y frame b√¨nh th∆∞·ªùng
                frame = camera.get_frame()
            
            cv2.imshow("Camera Feed with FPS", frame)
            
            key = cv2.waitKey(1) & 0xFF
            if key == ord('q'):
                break
            elif key == ord('f'):
                show_fps = not show_fps
                print(f"Hi·ªÉn th·ªã FPS: {'B·∫¨T' if show_fps else 'T·∫ÆT'}")
            elif key == ord('s'):
                current_fps = camera.get_fps()
                print(f"FPS hi·ªán t·∫°i: {current_fps:.2f} (Target: {camera.fps})")
                
    except KeyboardInterrupt:
        print("ƒê√£ d·ª´ng camera do nh·∫≠n t√≠n hi·ªáu ng·∫Øt t·ª´ b√†n ph√≠m")
    except Exception as e:
        print(f"L·ªói: {str(e)}")
    finally:
        camera.release() 