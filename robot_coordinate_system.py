"""
H·ªá th·ªëng t·ªça ƒë·ªô Robot cho Theta4 Calculator
- S·ª≠ d·ª•ng h·ªá quy chi·∫øu robot: X (ph·∫£i‚Üítr√°i), Y (tr√™n‚Üíd∆∞·ªõi)  
- X√°c ƒë·ªãnh ph∆∞∆°ng X c·ªßa object d·ª±a v√†o c·∫°nh chi·ªÅu d√†i
- Chuy·ªÉn ƒë·ªïi t·ª´ YOLO OBB format sang robot coordinates
"""

import math
import numpy as np
from typing import Dict, List, Tuple, Any

class RobotCoordinateSystem:
    """
    X·ª≠ l√Ω chuy·ªÉn ƒë·ªïi t·ªça ƒë·ªô v√† g√≥c t·ª´ YOLO detection sang h·ªá quy chi·∫øu robot.
    
    H·ªá quy chi·∫øu Robot:
    - X axis: Ph·∫£i ‚Üí Tr√°i (ƒê√¥ng ‚Üí T√¢y)
    - Y axis: Tr√™n ‚Üí D∆∞·ªõi (B·∫Øc ‚Üí Nam)
    - G√≥c d∆∞∆°ng: Counter-clockwise 
    - Range: [-180¬∞, 180¬∞]
    
    Quy ∆∞·ªõc object orientation:
    - Ph∆∞∆°ng X c·ªßa object = H∆∞·ªõng c·ªßa c·∫°nh chi·ªÅu d√†i
    - Ph∆∞∆°ng Y c·ªßa object = H∆∞·ªõng c·ªßa c·∫°nh chi·ªÅu r·ªông
    """
    
    def __init__(self, debug: bool = True):
        """
        Args:
            debug: B·∫≠t debug ƒë·ªÉ hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
        """
        self.debug = debug
        
    def normalize_angle(self, angle_deg: float) -> float:
        """Chu·∫©n h√≥a g√≥c v·ªÅ kho·∫£ng [-180, 180]"""
        while angle_deg > 180:
            angle_deg -= 360
        while angle_deg <= -180:
            angle_deg += 360
        return angle_deg
    
    def convert_image_to_robot_coordinates(self, image_x: float, image_y: float, 
                                         image_width: int, image_height: int) -> Tuple[float, float]:
        """
        Chuy·ªÉn ƒë·ªïi t·ªça ƒë·ªô t·ª´ image coordinates sang robot coordinates.
        
        Args:
            image_x, image_y: T·ªça ƒë·ªô trong image (pixel)
            image_width, image_height: K√≠ch th∆∞·ªõc ·∫£nh
            
        Returns:
            Tuple[float, float]: T·ªça ƒë·ªô trong robot coordinates (normalized [0,1])
        """
        # Normalize v·ªÅ [0,1]
        norm_x = image_x / image_width
        norm_y = image_y / image_height
        
        # Chuy·ªÉn ƒë·ªïi sang robot coordinates
        # Image X (tr√°i‚Üíph·∫£i) = Robot X (ph·∫£i‚Üítr√°i) ƒë·∫£o ng∆∞·ª£c
        robot_x = 1.0 - norm_x  # ƒê·∫£o ng∆∞·ª£c X
        robot_y = norm_y        # Gi·ªØ nguy√™n Y
        
        return robot_x, robot_y
    
    def convert_image_angle_to_robot_angle(self, image_angle_deg: float) -> float:
        """
        Chuy·ªÉn ƒë·ªïi g√≥c t·ª´ image coordinates sang robot coordinates.
        
        Args:
            image_angle_deg: G√≥c trong image coordinates
            
        Returns:
            float: G√≥c trong robot coordinates
        """
        # ƒê·∫£o ng∆∞·ª£c tr·ª•c X n√™n g√≥c c≈©ng ph·∫£i ƒëi·ªÅu ch·ªânh
        # G√≥c 0¬∞ trong image (h∆∞·ªõng ph·∫£i) = g√≥c 180¬∞ trong robot (h∆∞·ªõng tr√°i)
        robot_angle = 180.0 - image_angle_deg
        
        return self.normalize_angle(robot_angle)
    
    def determine_object_main_axis(self, width: float, height: float, 
                                 yolo_angle_rad: float) -> Dict[str, Any]:
        """
        X√°c ƒë·ªãnh tr·ª•c ch√≠nh (ph∆∞∆°ng X) c·ªßa object d·ª±a v√†o c·∫°nh d√†i.
        
        Args:
            width: Chi·ªÅu r·ªông t·ª´ YOLO OBB
            height: Chi·ªÅu cao t·ª´ YOLO OBB  
            yolo_angle_rad: G√≥c xoay t·ª´ YOLO (radian)
            
        Returns:
            Dict v·ªõi th√¥ng tin v·ªÅ tr·ª•c ch√≠nh c·ªßa object
        """
        # Chuy·ªÉn YOLO angle t·ª´ radian sang ƒë·ªô
        yolo_angle_deg = math.degrees(yolo_angle_rad)
        
        # X√°c ƒë·ªãnh c·∫°nh n√†o d√†i h∆°n
        if width >= height:
            # Width l√† c·∫°nh d√†i ‚Üí Width direction = X axis c·ªßa object
            main_axis_length = width
            secondary_axis_length = height
            main_axis_type = "width"
            
            # G√≥c c·ªßa width direction ch√≠nh l√† YOLO angle
            object_x_angle_image = yolo_angle_deg
            
        else:
            # Height l√† c·∫°nh d√†i ‚Üí Height direction = X axis c·ªßa object  
            main_axis_length = height
            secondary_axis_length = width
            main_axis_type = "height"
            
            # G√≥c c·ªßa height direction = YOLO angle + 90¬∞
            object_x_angle_image = yolo_angle_deg + 90.0
        
        # Chu·∫©n h√≥a g√≥c trong image coordinates
        object_x_angle_image = self.normalize_angle(object_x_angle_image)
        
        # Chuy·ªÉn ƒë·ªïi sang robot coordinates
        object_x_angle_robot = self.convert_image_angle_to_robot_angle(object_x_angle_image)
        
        return {
            'main_axis_length': main_axis_length,
            'secondary_axis_length': secondary_axis_length,
            'main_axis_type': main_axis_type,
            'aspect_ratio': main_axis_length / secondary_axis_length,
            'yolo_angle_deg': yolo_angle_deg,
            'object_x_angle_image': object_x_angle_image,
            'object_x_angle_robot': object_x_angle_robot,
            'object_orientation': self.describe_robot_orientation(object_x_angle_robot)
        }
    
    def describe_robot_orientation(self, angle_deg: float) -> Dict[str, str]:
        """
        M√¥ t·∫£ h∆∞·ªõng c·ªßa object trong h·ªá t·ªça ƒë·ªô robot.
        
        Args:
            angle_deg: G√≥c trong robot coordinates
            
        Returns:
            Dict v·ªõi m√¥ t·∫£ h∆∞·ªõng
        """
        angle_abs = abs(angle_deg)
        
        if -5 <= angle_deg <= 5:
            direction = "‚Üí ƒê√îNG"
            description = "H∆∞·ªõng ƒê√¥ng (X+ robot)"
            compass = "E"
        elif 175 <= angle_abs <= 180:
            direction = "‚Üê T√ÇY" 
            description = "H∆∞·ªõng T√¢y (X- robot)"
            compass = "W"
        elif 85 <= angle_deg <= 95:
            direction = "‚Üë B·∫ÆC"
            description = "H∆∞·ªõng B·∫Øc (Y- robot)"
            compass = "N"
        elif -95 <= angle_deg <= -85:
            direction = "‚Üì NAM"
            description = "H∆∞·ªõng Nam (Y+ robot)" 
            compass = "S"
        elif 0 < angle_deg < 90:
            direction = "‚Üó ƒê√îNG B·∫ÆC"
            description = "H∆∞·ªõng ƒê√¥ng B·∫Øc"
            compass = "NE"
        elif 90 < angle_deg < 180:
            direction = "‚Üñ T√ÇY B·∫ÆC"
            description = "H∆∞·ªõng T√¢y B·∫Øc"
            compass = "NW"
        elif -90 < angle_deg < 0:
            direction = "‚Üò ƒê√îNG NAM"
            description = "H∆∞·ªõng ƒê√¥ng Nam"
            compass = "SE"
        elif -180 < angle_deg < -90:
            direction = "‚Üô T√ÇY NAM"
            description = "H∆∞·ªõng T√¢y Nam"
            compass = "SW"
        else:
            direction = "? UNKNOWN"
            description = "Kh√¥ng x√°c ƒë·ªãnh"
            compass = "?"
            
        return {
            'direction': direction,
            'description': description,
            'compass': compass,
            'quadrant': self.get_quadrant(angle_deg)
        }
    
    def get_quadrant(self, angle_deg: float) -> str:
        """X√°c ƒë·ªãnh g√≥c ph·∫ßn t∆∞ trong robot coordinates"""
        if 0 <= angle_deg < 90:
            return "Quadrant I (NE)"
        elif 90 <= angle_deg < 180:
            return "Quadrant II (NW)"
        elif -180 <= angle_deg < -90:
            return "Quadrant III (SW)"
        elif -90 <= angle_deg < 0:
            return "Quadrant IV (SE)"
        else:
            return "Boundary"
    
    def analyze_object_from_yolo_obb(self, obb_data: List[float], 
                                   class_name: str = "object") -> Dict[str, Any]:
        """
        Ph√¢n t√≠ch ho√†n ch·ªânh object t·ª´ YOLO OBB data.
        
        Args:
            obb_data: [cx, cy, width, height, angle_rad] t·ª´ YOLO
            class_name: T√™n class c·ªßa object
            
        Returns:
            Dict v·ªõi th√¥ng tin ph√¢n t√≠ch ƒë·∫ßy ƒë·ªß
        """
        if len(obb_data) < 5:
            raise ValueError("OBB data c·∫ßn c√≥ √≠t nh·∫•t 5 ph·∫ßn t·ª≠ [cx, cy, width, height, angle]")
        
        cx, cy, width, height, angle_rad = obb_data[:5]
        
        # Ph√¢n t√≠ch tr·ª•c ch√≠nh
        main_axis_info = self.determine_object_main_axis(width, height, angle_rad)
        
        # Th√¥ng tin t·ªïng h·ª£p
        result = {
            'class_name': class_name,
            'center_image': (cx, cy),
            'size': (width, height),
            'yolo_angle_rad': angle_rad,
            'main_axis_info': main_axis_info,
            'object_x_direction': {
                'angle_robot': main_axis_info['object_x_angle_robot'],
                'orientation': main_axis_info['object_orientation']
            },
            'summary': {
                'main_axis': f"{main_axis_info['main_axis_type']} ({main_axis_info['main_axis_length']:.1f}px)",
                'aspect_ratio': f"{main_axis_info['aspect_ratio']:.2f}:1",
                'robot_orientation': main_axis_info['object_orientation']['description']
            }
        }
        
        if self.debug:
            self.print_object_analysis(result)
            
        return result
    
    def print_object_analysis(self, analysis: Dict[str, Any]):
        """In th√¥ng tin ph√¢n t√≠ch object ƒë·ªÉ debug"""
        print(f"\nüì¶ OBJECT: {analysis['class_name']}")
        print(f"   Center: {analysis['center_image']}")
        print(f"   Size: {analysis['size'][0]:.1f} x {analysis['size'][1]:.1f}")
        print(f"   YOLO angle: {math.degrees(analysis['yolo_angle_rad']):.1f}¬∞")
        print(f"   Main axis: {analysis['summary']['main_axis']}")
        print(f"   Aspect ratio: {analysis['summary']['aspect_ratio']}")
        print(f"   üß≠ Object X direction: {analysis['object_x_direction']['orientation']['direction']}")
        print(f"   üìê Robot angle: {analysis['object_x_direction']['angle_robot']:.1f}¬∞")
        print(f"   üìç Description: {analysis['summary']['robot_orientation']}")

def test_coordinate_system():
    """Test function ƒë·ªÉ ki·ªÉm tra h·ªá t·ªça ƒë·ªô"""
    print("="*80)
    print("KI·ªÇM TRA H·ªÜ T·ªåA ƒê·ªò ROBOT")
    print("="*80)
    
    coords = RobotCoordinateSystem(debug=True)
    
    # Test cases v·ªõi c√°c v√≠ d·ª• kh√°c nhau
    test_cases = [
        {
            'name': 'Load n·∫±m ngang (width > height)',
            'obb': [640, 360, 200, 100, 0],  # [cx, cy, w, h, angle_rad]
            'class': 'load'
        },
        {
            'name': 'Load ƒë·ª©ng (height > width)', 
            'obb': [640, 360, 100, 200, 0],
            'class': 'load'
        },
        {
            'name': 'Load xoay 45¬∞ (width > height)',
            'obb': [640, 360, 200, 100, math.radians(45)],
            'class': 'load'
        },
        {
            'name': 'Pallet vu√¥ng',
            'obb': [640, 360, 150, 150, math.radians(30)],
            'class': 'pallet'
        }
    ]
    
    for i, test in enumerate(test_cases, 1):
        print(f"\n{'='*20} TEST CASE {i}: {test['name']} {'='*20}")
        analysis = coords.analyze_object_from_yolo_obb(test['obb'], test['class'])

if __name__ == "__main__":
    test_coordinate_system() 