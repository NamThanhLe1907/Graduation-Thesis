"""
Test file ƒë·ªÉ ki·ªÉm tra camera brightness v·ªõi optimized settings ƒë√£ ƒë∆∞·ª£c fix.
B√¢y gi·ªù optimized settings s·∫Ω KH√îNG l√†m camera t·ªëi n·ªØa.
"""
import cv2
from detection.camera import CameraInterface
import time

def test_camera_brightness_fixed():
    """Test camera brightness v·ªõi optimized settings ƒë√£ fix."""
    
    print("=== TEST CAMERA BRIGHTNESS - OPTIMIZED SETTINGS FIXED ===")
    
    # Test 1: Camera v·ªõi optimized settings = False (m·∫∑c ƒë·ªãnh) 
    print("\n--- TEST 1: Standard Settings ---")
    camera_standard = CameraInterface(use_optimized_settings=False)
    
    try:
        camera_standard.initialize()
        print("üìπ Camera kh·ªüi t·∫°o v·ªõi Standard Settings")
        print("Nh·∫•n 'q' ƒë·ªÉ chuy·ªÉn sang test ti·∫øp theo")
        
        while True:
            frame = camera_standard.get_frame()
            cv2.putText(frame, "Test 1: Standard Settings", (10, 30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            cv2.putText(frame, "use_optimized_settings = False", (10, 70), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            cv2.putText(frame, "Press 'q' to continue", (10, 110), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            cv2.imshow("Camera Brightness Test", frame)
            
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
        
        camera_standard.release()
        cv2.destroyAllWindows()
        
    except Exception as e:
        print(f"‚ùå L·ªói Test 1: {e}")
        camera_standard.release()
    
    # Test 2: Camera v·ªõi optimized settings = True (ƒë√£ fix)
    print("\n--- TEST 2: Optimized Settings (FIXED) ---")
    camera_optimized = CameraInterface(use_optimized_settings=True)
    
    try:
        camera_optimized.initialize()
        print("‚ö° Camera kh·ªüi t·∫°o v·ªõi Optimized Settings (ƒë√£ fix)")
        print("Camera s·∫Ω KH√îNG c√≤n t·ªëi nh∆∞ tr∆∞·ªõc n·ªØa!")
        print("Nh·∫•n 'q' ƒë·ªÉ chuy·ªÉn sang test ti·∫øp theo")
        
        while True:
            frame = camera_optimized.get_frame()
            cv2.putText(frame, "Test 2: Optimized Settings (FIXED)", (10, 30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            cv2.putText(frame, "use_optimized_settings = True", (10, 70), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            cv2.putText(frame, "Auto exposure ENABLED (0.75)", (10, 110), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 255), 2)
            cv2.putText(frame, "Press 'q' to continue", (10, 150), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
            cv2.imshow("Camera Brightness Test", frame)
            
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

        
    except Exception as e:
        print(f"‚ùå L·ªói Test 2-3: {e}")
    
    finally:
        camera_optimized.release()
        cv2.destroyAllWindows()

if __name__ == "__main__":
    test_camera_brightness_fixed() 